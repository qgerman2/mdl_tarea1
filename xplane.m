clc
clearvars

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\asd\Documents\Data - copia.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2021/04/11 17:25:34

%% Initialize variables.
filename = 'Data - copia.txt';
delimiter = '|';
startRow = 3;
endRow = 1299;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
real_time = cell2mat(raw(:, 1));
totl_time = cell2mat(raw(:, 2));
missn_time = cell2mat(raw(:, 3));
timer_time = cell2mat(raw(:, 4));
zulu_time = cell2mat(raw(:, 5));
local_time = cell2mat(raw(:, 6));
hobbs_time = cell2mat(raw(:, 7));
SLprs_inHG = cell2mat(raw(:, 8));
SLtmp_degC = cell2mat(raw(:, 9));
windspeed = cell2mat(raw(:, 10));
wind__dir = cell2mat(raw(:, 11));
trb_locl = cell2mat(raw(:, 12));
prec_locl = cell2mat(raw(:, 13));
hail_locl = cell2mat(raw(:, 14));
AMprs_inHG = cell2mat(raw(:, 15));
AMtmp_degC = cell2mat(raw(:, 16));
LEtmp_degC = cell2mat(raw(:, 17));
densratio = cell2mat(raw(:, 18));
A_ktas = cell2mat(raw(:, 19));
Q__psf = cell2mat(raw(:, 20));
gravi_fts2 = cell2mat(raw(:, 21));
lat__deg = cell2mat(raw(:, 22));
lon__deg = cell2mat(raw(:, 23));
altftmsl = cell2mat(raw(:, 24));
altftagl = cell2mat(raw(:, 25));
onrunwy = cell2mat(raw(:, 26));
alt__ind = cell2mat(raw(:, 27));
latsouth = cell2mat(raw(:, 28));
lon_west = cell2mat(raw(:, 29));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%%%%limpiar datos
%%ordenar presion y temperatura deacuerdo a altura
[alturaft_ordenada,I] = sort(altftmsl);
AMtmp_degC_ordenada = AMtmp_degC(I);
AMprs_inHG_ordenada = AMprs_inHG(I);
%%velocidad del sonido
temperatura_K = AMtmp_degC_ordenada + 273;
R = 287.05;
ae = 1.4;
v_sonido = sqrt(ae * R * temperatura_K) * 0.001; %%conversion?
%%densidad
%%xplane entrega la razon entre la densidad en altura / densidad nivel de mar
densratio_ordenada = densratio(I);
%%densidad a nivel del mar (kg m3)
densidad_mar = SLprs_inHG(1) * 3386.39 / (R * (SLtmp_degC(1) + 273));
densidad_atm = densratio_ordenada * densidad_mar;

%%grafico
figure(1)
hold on

yyaxis left
plot(alturaft_ordenada,AMtmp_degC_ordenada,':k');
plot(alturaft_ordenada,AMprs_inHG_ordenada,'--b');
xlabel('Height [ft]','FontName','Times New Roman')
ylabel('Temperature [°C], Pressure [inHg]','FontName','Times New Roman');
xlim([0 50000])
ylim([-70 40])
yyaxis right
ylim([0 1.4])
plot(alturaft_ordenada,v_sonido,'-.r');
plot(alturaft_ordenada,densidad_atm,'-k');
xlabel('Height [ft]','FontName','Times New Roman')
legend('Temperature','Pressure','Speed of Sound','Density','FontName','Times New Roman');
ylabel ('Speed of Sound [km/s], Density [kg/m^3]','FontName','Times New Roman');
hold off
